package com.bjb.cultural.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.bjb.cultural.dao.BoxGroup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOX_GROUP.
*/
public class BOX_GROUP extends AbstractDao<BoxGroup, Void> {

    public static final String TABLENAME = "BOX_GROUP";

    /**
     * Properties of entity BoxGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GROUP_ID = new Property(0, String.class, "GROUP_ID", false, "GROUP_ID");
        public final static Property GROUP_NAME = new Property(1, String.class, "GROUP_NAME", false, "GROUP_NAME");
        public final static Property SHOW_SORT = new Property(2, Integer.class, "SHOW_SORT", false, "SHOW_SORT");
        public final static Property IMG_CLIENT = new Property(3, String.class, "IMG_CLIENT", false, "IMG_CLIENT");
        public final static Property IMG_APK = new Property(4, String.class, "IMG_APK", false, "IMG_APK");
    };


    public BOX_GROUP(DaoConfig config) {
        super(config);
    }
    
    public BOX_GROUP(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOX_GROUP' (" + //
                "'GROUP_ID' TEXT," + // 0: GROUP_ID
                "'GROUP_NAME' TEXT," + // 1: GROUP_NAME
                "'SHOW_SORT' INTEGER," + // 2: SHOW_SORT
                "'IMG_CLIENT' TEXT," + // 3: IMG_CLIENT
                "'IMG_APK' TEXT);"); // 4: IMG_APK
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOX_GROUP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BoxGroup entity) {
        stmt.clearBindings();
 
        String GROUP_ID = entity.getGROUP_ID();
        if (GROUP_ID != null) {
            stmt.bindString(1, GROUP_ID);
        }
 
        String GROUP_NAME = entity.getGROUP_NAME();
        if (GROUP_NAME != null) {
            stmt.bindString(2, GROUP_NAME);
        }
 
        Integer SHOW_SORT = entity.getSHOW_SORT();
        if (SHOW_SORT != null) {
            stmt.bindLong(3, SHOW_SORT);
        }
 
        String IMG_CLIENT = entity.getIMG_CLIENT();
        if (IMG_CLIENT != null) {
            stmt.bindString(4, IMG_CLIENT);
        }
 
        String IMG_APK = entity.getIMG_APK();
        if (IMG_APK != null) {
            stmt.bindString(5, IMG_APK);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public BoxGroup readEntity(Cursor cursor, int offset) {
        BoxGroup entity = new BoxGroup( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // GROUP_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // GROUP_NAME
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // SHOW_SORT
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // IMG_CLIENT
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // IMG_APK
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BoxGroup entity, int offset) {
        entity.setGROUP_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGROUP_NAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSHOW_SORT(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIMG_CLIENT(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIMG_APK(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(BoxGroup entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(BoxGroup entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
